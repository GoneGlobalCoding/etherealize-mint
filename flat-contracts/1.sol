pragma solidity ^0.4.18;

/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/179
 */
contract ERC20Basic {
  uint256 public totalSupply;
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}

/**
 * @title Basic token
 * @dev Basic version of StandardToken, with no allowances.
 */
contract BasicToken is ERC20Basic {
  using SafeMath for uint256;

  mapping(address => uint256) balances;

  /**
  * @dev transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[msg.sender]);

    // SafeMath.sub will throw if there is not enough balance.
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    Transfer(msg.sender, _to, _value);
    return true;
  }

  /**
  * @dev Gets the balance of the specified address.
  * @param _owner The address to query the the balance of.
  * @return An uint256 representing the amount owned by the passed address.
  */
  function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner];
  }

}


/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 is ERC20Basic {
  function allowance(address owner, address spender) public view returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}

/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
  address public owner;


  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);


  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  function Ownable() public {
    owner = msg.sender;
  }


  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }


  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }

}

/**
 * @title Standard ERC20 token
 *
 * @dev Implementation of the basic standard token.
 * @dev https://github.com/ethereum/EIPs/issues/20
 * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
 */
contract StandardToken is ERC20, BasicToken {

  mapping (address => mapping (address => uint256)) internal allowed;


  /**
   * @dev Transfer tokens from one address to another
   * @param _from address The address which you want to send tokens from
   * @param _to address The address which you want to transfer to
   * @param _value uint256 the amount of tokens to be transferred
   */
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[_from]);
    require(_value <= allowed[_from][msg.sender]);

    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    Transfer(_from, _to, _value);
    return true;
  }

  /**
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   *
   * Beware that changing an allowance with this method brings the risk that someone may use both the old
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   * @param _spender The address which will spend the funds.
   * @param _value The amount of tokens to be spent.
   */
  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    Approval(msg.sender, _spender, _value);
    return true;
  }

  /**
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param _owner address The address which owns the funds.
   * @param _spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(address _owner, address _spender) public view returns (uint256) {
    return allowed[_owner][_spender];
  }

  /**
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   */
  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

}


/**
 * @title Mintable token
 * @dev Simple ERC20 Token example, with mintable token creation
 * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120
 * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol
 */

contract MintableToken is StandardToken, Ownable {
  event Mint(address indexed to, uint256 amount);
  event MintFinished();

  bool public mintingFinished = false;


  modifier canMint() {
    require(!mintingFinished);
    _;
  }

  /**
   * @dev Function to mint tokens
   * @param _to The address that will receive the minted tokens.
   * @param _amount The amount of tokens to mint.
   * @return A boolean that indicates if the operation was successful.
   */
  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {
    totalSupply = totalSupply.add(_amount);
    balances[_to] = balances[_to].add(_amount);
    Mint(_to, _amount);
    Transfer(address(0), _to, _amount);
    return true;
  }

  /**
   * @dev Function to stop minting new tokens.
   * @return True if the operation was successful.
   */
  function finishMinting() onlyOwner canMint public returns (bool) {
    mintingFinished = true;
    MintFinished();
    return true;
  }
}


// Define a contract
contract EtherealizeMint is MintableToken {
    // Set a name for the token
    string public name = "EtherealizeMint";
    // Set a symbol for the token
    string public symbol = "ETR";
    // Specify to what number of decimals the token be divisible to. Make 1:1 with gwei.
    uint public decimals = 18;
    // Specify the divisble number for percentage calculations
    uint public hundred = 100;
    // Specify the factor of minted tokens that go to the fund. Will be divided by 100 to form a precentage
    uint public tokenForFundFactor = 3; 
    // Holds the funds target wallet address for a percentage of minted tokens to be sent to.
    address public fundWallet;

    /**
    * @dev Function to set fundAddress. This address is where fund minted tokens are destined for.
    * @param _targetAddress The address that will receive the minted tokens.
    * @return A boolean that indicates if the operation was successful.
    */
    function setFundWallet(address _targetAddress) onlyOwner public returns (bool) {
        // require(_targetAddress != address(0));
        fundWallet = _targetAddress;
        return true;
    }

    /**
    * @dev Function that mints tokens to the fund address based on a multiplier
    * @param _amount The amount of tokens to mint.
    * @return A boolean that indicates if the operation was successful.
    */
    function mintTokensForFund(uint256 _amount) onlyOwner canMint public returns (bool) {
        uint256 tokenAmountToFund = (_amount * tokenForFundFactor) / hundred; 
        totalSupply = totalSupply.add(tokenAmountToFund);
        balances[fundWallet] = balances[fundWallet].add(tokenAmountToFund); 
        Mint(fundWallet, tokenAmountToFund);
        Transfer(address(0), fundWallet, tokenAmountToFund);
        return true;
    }

    /**
    * @dev Function that overrides MintableToken mint implmentation
    * @param _to The address that will receive the minted tokens.
    * @param _amount The amount of tokens to mint.
    * @return A boolean that indicates if the operation was successful.
    */
    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {
        // bool isFundMinted = mintTokensForFund(_amount);
        // require(isFundMinted == true);
        mintTokensForFund(_amount);
        totalSupply = totalSupply.add(_amount);
        balances[_to] = balances[_to].add(_amount);
        Mint(_to, _amount);
        Transfer(address(0), _to, _amount);
        return true;
    }

}

/**
 * @title EtherealizeCrowdsale
 * @dev EtherealizeCrowdsale is a base contract for managing a token crowdsale.
 * Crowdsales have a start and end timestamps, where investors can make
 * token purchases and the crowdsale will assign them tokens based
 * on a token per ETH rate. Funds collected are forwarded to a wallet
 * as they arrive.
 */
contract EtherealizeCrowdsale {
  using SafeMath for uint256;

  // The token being sold
  EtherealizeMint public token;

  // start and end timestamps where investments are allowed (both inclusive)
  uint256 public startTime;
  uint256 public endTime;

  // address where funds are collected
  address public wallet;

  // how many token units a buyer gets per wei
  uint256 public rate;

  // amount of raised money in wei
  uint256 public weiRaised;

  /**
   * event for token purchase logging
   * @param purchaser who paid for the tokens
   * @param beneficiary who got the tokens
   * @param value weis paid for purchase
   * @param amount amount of tokens purchased
   */
  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);


  function EtherealizeCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {
    require(_startTime >= now);
    require(_endTime >= _startTime);
    require(_rate > 0);
    require(_wallet != address(0));

    token = createTokenContract();
    // token.setFundWallet(_wallet);
    startTime = _startTime;
    endTime = _endTime;
    rate = _rate;
    wallet = _wallet;
  }

  // creates the token to be sold.
  // override this method to have crowdsale of a specific mintable token.
  function createTokenContract() internal returns (EtherealizeMint) {
    return new EtherealizeMint();
  }


  // fallback function can be used to buy tokens
  function () external payable {
    buyTokens(msg.sender);
  }

  // low level token purchase function
  function buyTokens(address beneficiary) public payable {
    require(beneficiary != address(0));
    require(validPurchase());

    uint256 weiAmount = msg.value;

    // calculate token amount to be created
    uint256 tokens = weiAmount.mul(rate);

    // update state
    weiRaised = weiRaised.add(weiAmount);

    token.mint(beneficiary, tokens);
    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    forwardFunds();
  }

  // send ether to the fund collection wallet
  // override to create custom fund forwarding mechanisms
  function forwardFunds() internal {
    wallet.transfer(msg.value);
  }

  // @return true if the transaction can buy tokens
  function validPurchase() internal view returns (bool) {
    bool withinPeriod = now >= startTime && now <= endTime;
    bool nonZeroPurchase = msg.value != 0;
    return withinPeriod && nonZeroPurchase;
  }

  // @return true if crowdsale event has ended
  function hasEnded() public view returns (bool) {
    return now > endTime;
  }


}


// Desired
// 0x6060604052341561000f57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506102db8061005e6000396000f300606060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630900f01014610067578063445df0ac146100a05780638da5cb5b146100c9578063fdacd5761461011e575b600080fd5b341561007257600080fd5b61009e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610141565b005b34156100ab57600080fd5b6100b3610224565b6040518082815260200191505060405180910390f35b34156100d457600080fd5b6100dc61022a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561012957600080fd5b61013f600480803590602001909190505061024f565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610220578190508073ffffffffffffffffffffffffffffffffffffffff1663fdacd5766001546040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b151561020b57600080fd5b6102c65a03f1151561021c57600080fd5b5050505b5050565b60015481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102ac57806001819055505b505600a165627a7a72305820a51d6241d258c63f4b44e557ac848888b1a621b47fde9616d700e7e76b868ab80029

// 0x6060604052341561000f57600080fd5b604051608080612429833981016040528080519190602001805191906020018051919060200180519150504284101561004757600080fd5b8383101561005457600080fd5b6000821161006157600080fd5b600160a060020a038116151561007657600080fd5b61008b6401000000006103a96100cd82021704565b60008054600160a060020a0319908116600160a060020a0393841617909155600195909555600293909355600491909155600380549093169116179055610102565b60006100d76100f2565b604051809103906000f08015156100ed57600080fd5b905090565b604051610f87806114a283390190565b611391806101116000396000f30060606040526004361061008d5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632c4e722e81146100985780633197cbb6146100bd5780634042b66f146100d0578063521eb273146100e357806378e9792514610112578063ec8ac4d814610125578063ecb70fb714610139578063fc0c546a14610160575b61009633610173565b005b34156100a357600080fd5b6100ab6102c0565b60405190815260200160405180910390f35b34156100c857600080fd5b6100ab6102c6565b34156100db57600080fd5b6100ab6102cc565b34156100ee57600080fd5b6100f66102d2565b604051600160a060020a03909116815260200160405180910390f35b341561011d57600080fd5b6100ab6102e1565b610096600160a060020a0360043516610173565b341561014457600080fd5b61014c6102e7565b604051901515815260200160405180910390f35b341561016b57600080fd5b6100f66102ef565b600080600160a060020a038316151561018b57600080fd5b6101936102fe565b151561019e57600080fd5b6004543492506101b590839063ffffffff61032e16565b6005549091506101cb908363ffffffff61036416565b60055560008054600160a060020a0316906340c10f199085908490604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561024957600080fd5b6102c65a03f1151561025a57600080fd5b505050604051805190505082600160a060020a031633600160a060020a03167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18848460405191825260208201526040908101905180910390a36102bb610373565b505050565b60045481565b60025481565b60055481565b600354600160a060020a031681565b60015481565b600254421190565b600054600160a060020a031681565b6000806000600154421015801561031757506002544211155b9150503415158180156103275750805b9250505090565b600080831515610341576000915061035d565b5082820282848281151561035157fe5b041461035957fe5b8091505b5092915050565b60008282018381101561035957fe5b600354600160a060020a03163480156108fc0290604051600060405180830381858888f1935050505015156103a757600080fd5b565b60006103b36103ce565b604051809103906000f08015156103c957600080fd5b905090565b604051610f87806103df833901905600606060409081526003805460a060020a60ff02191690558051908101604052600f81527f457468657265616c697a654d696e7400000000000000000000000000000000006020820152600490805161005b9291602001906100d3565b5060408051908101604052600381527f4554520000000000000000000000000000000000000000000000000000000000602082015260059080516100a39291602001906100d3565b5060126006556064600755600360088190558054600160a060020a03191633600160a060020a031617905561016e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011457805160ff1916838001178555610141565b82800160010185558215610141579182015b82811115610141578251825591602001919060010190610126565b5061014d929150610151565b5090565b61016b91905b8082111561014d5760008155600101610157565b90565b610e0a8061017d6000396000f30060606040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461012157806306fdde0314610148578063095ea7b3146101d257806311949e2b146101f457806318160ddd1461021957806323b872dd1461022c578063313ce5671461025457806340c10f191461026757806355ce3b9a146102895780635bff9a27146102a857806366188463146102bb578063664a1ad6146102dd57806370a082311461030c5780637d64bcb41461032b5780638c58cd721461033e5780638da5cb5b1461035457806395d89b4114610367578063a9059cbb1461037a578063d73dd6231461039c578063dd62ed3e146103be578063f2fde38b146103e3575b600080fd5b341561012c57600080fd5b610134610404565b604051901515815260200160405180910390f35b341561015357600080fd5b61015b610414565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561019757808201518382015260200161017f565b50505050905090810190601f1680156101c45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101dd57600080fd5b610134600160a060020a03600435166024356104b2565b34156101ff57600080fd5b61020761051e565b60405190815260200160405180910390f35b341561022457600080fd5b610207610524565b341561023757600080fd5b610134600160a060020a036004358116906024351660443561052a565b341561025f57600080fd5b61020761069a565b341561027257600080fd5b610134600160a060020a03600435166024356106a0565b341561029457600080fd5b610134600160a060020a03600435166107a5565b34156102b357600080fd5b6102076107f5565b34156102c657600080fd5b610134600160a060020a03600435166024356107fb565b34156102e857600080fd5b6102f06108f5565b604051600160a060020a03909116815260200160405180910390f35b341561031757600080fd5b610207600160a060020a0360043516610904565b341561033657600080fd5b61013461091f565b341561034957600080fd5b6101346004356109aa565b341561035f57600080fd5b6102f0610ac9565b341561037257600080fd5b61015b610ad8565b341561038557600080fd5b610134600160a060020a0360043516602435610b43565b34156103a757600080fd5b610134600160a060020a0360043516602435610c2c565b34156103c957600080fd5b610207600160a060020a0360043581169060243516610cd0565b34156103ee57600080fd5b610402600160a060020a0360043516610cfb565b005b60035460a060020a900460ff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104aa5780601f1061047f576101008083540402835291602001916104aa565b820191906000526020600020905b81548152906001019060200180831161048d57829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60085481565b60005481565b6000600160a060020a038316151561054157600080fd5b600160a060020a03841660009081526001602052604090205482111561056657600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561059957600080fd5b600160a060020a0384166000908152600160205260409020546105c2908363ffffffff610d9616565b600160a060020a0380861660009081526001602052604080822093909355908516815220546105f7908363ffffffff610da816565b600160a060020a0380851660009081526001602090815260408083209490945587831682526002815283822033909316825291909152205461063f908363ffffffff610d9616565b600160a060020a0380861660008181526002602090815260408083203386168452909152908190209390935590851691600080516020610dbf8339815191529085905190815260200160405180910390a35060019392505050565b60065481565b60035460009033600160a060020a039081169116146106be57600080fd5b60035460a060020a900460ff16156106d557600080fd5b6106de826109aa565b506000546106f2908363ffffffff610da816565b6000908155600160a060020a03841681526001602052604090205461071d908363ffffffff610da816565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a0383166000600080516020610dbf8339815191528460405190815260200160405180910390a350600192915050565b60035460009033600160a060020a039081169116146107c357600080fd5b5060098054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b60075481565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561085857600160a060020a03338116600090815260026020908152604080832093881683529290529081205561088f565b610868818463ffffffff610d9616565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600954600160a060020a031681565b600160a060020a031660009081526001602052604090205490565b60035460009033600160a060020a0390811691161461093d57600080fd5b60035460a060020a900460ff161561095457600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600354600090819033600160a060020a039081169116146109ca57600080fd5b60035460a060020a900460ff16156109e157600080fd5b60075460085484028115156109f257fe5b049050610a0a81600054610da890919063ffffffff16565b6000908155600954600160a060020a0316815260016020526040902054610a37908263ffffffff610da816565b60098054600160a060020a039081166000908152600160205260409081902093909355905416907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859083905190815260200160405180910390a2600954600160a060020a03166000600080516020610dbf8339815191528360405190815260200160405180910390a350600192915050565b600354600160a060020a031681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104aa5780601f1061047f576101008083540402835291602001916104aa565b6000600160a060020a0383161515610b5a57600080fd5b600160a060020a033316600090815260016020526040902054821115610b7f57600080fd5b600160a060020a033316600090815260016020526040902054610ba8908363ffffffff610d9616565b600160a060020a033381166000908152600160205260408082209390935590851681522054610bdd908363ffffffff610da816565b600160a060020a038085166000818152600160205260409081902093909355913390911690600080516020610dbf8339815191529085905190815260200160405180910390a350600192915050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610c64908363ffffffff610da816565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610d1657600080fd5b600160a060020a0381161515610d2b57600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610da257fe5b50900390565b600082820183811015610db757fe5b93925050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820a5802060645aa6e65efd5f7ba802e1af99bc92d781fbca5a233ec69ef0bf92fd0029a165627a7a72305820e0de9f390822fdfd2e14b3f7b877661be6e0c5d4db44e084ebe0a44923be28810029606060409081526003805460a060020a60ff02191690558051908101604052600f81527f457468657265616c697a654d696e7400000000000000000000000000000000006020820152600490805161005b9291602001906100d3565b5060408051908101604052600381527f4554520000000000000000000000000000000000000000000000000000000000602082015260059080516100a39291602001906100d3565b5060126006556064600755600360088190558054600160a060020a03191633600160a060020a031617905561016e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011457805160ff1916838001178555610141565b82800160010185558215610141579182015b82811115610141578251825591602001919060010190610126565b5061014d929150610151565b5090565b61016b91905b8082111561014d5760008155600101610157565b90565b610e0a8061017d6000396000f30060606040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461012157806306fdde0314610148578063095ea7b3146101d257806311949e2b146101f457806318160ddd1461021957806323b872dd1461022c578063313ce5671461025457806340c10f191461026757806355ce3b9a146102895780635bff9a27146102a857806366188463146102bb578063664a1ad6146102dd57806370a082311461030c5780637d64bcb41461032b5780638c58cd721461033e5780638da5cb5b1461035457806395d89b4114610367578063a9059cbb1461037a578063d73dd6231461039c578063dd62ed3e146103be578063f2fde38b146103e3575b600080fd5b341561012c57600080fd5b610134610404565b604051901515815260200160405180910390f35b341561015357600080fd5b61015b610414565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561019757808201518382015260200161017f565b50505050905090810190601f1680156101c45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101dd57600080fd5b610134600160a060020a03600435166024356104b2565b34156101ff57600080fd5b61020761051e565b60405190815260200160405180910390f35b341561022457600080fd5b610207610524565b341561023757600080fd5b610134600160a060020a036004358116906024351660443561052a565b341561025f57600080fd5b61020761069a565b341561027257600080fd5b610134600160a060020a03600435166024356106a0565b341561029457600080fd5b610134600160a060020a03600435166107a5565b34156102b357600080fd5b6102076107f5565b34156102c657600080fd5b610134600160a060020a03600435166024356107fb565b34156102e857600080fd5b6102f06108f5565b604051600160a060020a03909116815260200160405180910390f35b341561031757600080fd5b610207600160a060020a0360043516610904565b341561033657600080fd5b61013461091f565b341561034957600080fd5b6101346004356109aa565b341561035f57600080fd5b6102f0610ac9565b341561037257600080fd5b61015b610ad8565b341561038557600080fd5b610134600160a060020a0360043516602435610b43565b34156103a757600080fd5b610134600160a060020a0360043516602435610c2c565b34156103c957600080fd5b610207600160a060020a0360043581169060243516610cd0565b34156103ee57600080fd5b610402600160a060020a0360043516610cfb565b005b60035460a060020a900460ff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104aa5780601f1061047f576101008083540402835291602001916104aa565b820191906000526020600020905b81548152906001019060200180831161048d57829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60085481565b60005481565b6000600160a060020a038316151561054157600080fd5b600160a060020a03841660009081526001602052604090205482111561056657600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561059957600080fd5b600160a060020a0384166000908152600160205260409020546105c2908363ffffffff610d9616565b600160a060020a0380861660009081526001602052604080822093909355908516815220546105f7908363ffffffff610da816565b600160a060020a0380851660009081526001602090815260408083209490945587831682526002815283822033909316825291909152205461063f908363ffffffff610d9616565b600160a060020a0380861660008181526002602090815260408083203386168452909152908190209390935590851691600080516020610dbf8339815191529085905190815260200160405180910390a35060019392505050565b60065481565b60035460009033600160a060020a039081169116146106be57600080fd5b60035460a060020a900460ff16156106d557600080fd5b6106de826109aa565b506000546106f2908363ffffffff610da816565b6000908155600160a060020a03841681526001602052604090205461071d908363ffffffff610da816565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a0383166000600080516020610dbf8339815191528460405190815260200160405180910390a350600192915050565b60035460009033600160a060020a039081169116146107c357600080fd5b5060098054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b60075481565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561085857600160a060020a03338116600090815260026020908152604080832093881683529290529081205561088f565b610868818463ffffffff610d9616565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600954600160a060020a031681565b600160a060020a031660009081526001602052604090205490565b60035460009033600160a060020a0390811691161461093d57600080fd5b60035460a060020a900460ff161561095457600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600354600090819033600160a060020a039081169116146109ca57600080fd5b60035460a060020a900460ff16156109e157600080fd5b60075460085484028115156109f257fe5b049050610a0a81600054610da890919063ffffffff16565b6000908155600954600160a060020a0316815260016020526040902054610a37908263ffffffff610da816565b60098054600160a060020a039081166000908152600160205260409081902093909355905416907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859083905190815260200160405180910390a2600954600160a060020a03166000600080516020610dbf8339815191528360405190815260200160405180910390a350600192915050565b600354600160a060020a031681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104aa5780601f1061047f576101008083540402835291602001916104aa565b6000600160a060020a0383161515610b5a57600080fd5b600160a060020a033316600090815260016020526040902054821115610b7f57600080fd5b600160a060020a033316600090815260016020526040902054610ba8908363ffffffff610d9616565b600160a060020a033381166000908152600160205260408082209390935590851681522054610bdd908363ffffffff610da816565b600160a060020a038085166000818152600160205260409081902093909355913390911690600080516020610dbf8339815191529085905190815260200160405180910390a350600192915050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610c64908363ffffffff610da816565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610d1657600080fd5b600160a060020a0381161515610d2b57600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610da257fe5b50900390565b600082820183811015610db757fe5b93925050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820a5802060645aa6e65efd5f7ba802e1af99bc92d781fbca5a233ec69ef0bf92fd0029

//  NEXT CHECK

// 